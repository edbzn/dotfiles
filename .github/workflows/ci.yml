name: CI - Validate Ansible Playbooks

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  lint-and-validate:
    name: Lint and Validate Playbooks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint yamllint

      - name: Display Ansible version
        run: |
          ansible --version
          ansible-lint --version
          yamllint --version

      - name: Validate YAML syntax
        run: |
          yamllint -c .yamllint.yml .
        continue-on-error: true

      - name: Create dummy vault password for CI
        run: |
          echo "ci-dummy-password" > .vault_password

      - name: Ansible syntax check
        run: |
          ansible-playbook playbook.yml --syntax-check

      - name: Ansible lint
        run: |
          ansible-lint playbook.yml
        continue-on-error: true

      - name: Dry run playbook (check mode)
        run: |
          # Create a temporary inventory for CI
          echo "[local]" > ci_hosts
          echo "localhost ansible_connection=local ansible_python_interpreter=/usr/bin/python3" >> ci_hosts

          # Run in check mode (no actual changes)
          ansible-playbook playbook.yml \
            -i ci_hosts \
            --check \
            --diff \
            -e "force_install=false" \
            -e "ansible_become_pass=dummy"
        continue-on-error: true

      - name: Check for deprecated Ansible features
        run: |
          grep -r "action:" roles/ || echo "No deprecated 'action:' usage found"
          grep -r "include:" roles/ || echo "No deprecated 'include:' usage found"

      - name: Validate all role task files
        run: |
          for role in roles/*/tasks/main.yml; do
            echo "Checking syntax for: $role"
            ansible-playbook --syntax-check -i ci_hosts - <<EOF
          ---
          - hosts: localhost
            roles:
              - $(basename $(dirname $(dirname $role)))
          EOF
          done
        continue-on-error: true

  test-installation:
    name: Test Installation on Ubuntu
    runs-on: ubuntu-latest
    needs: lint-and-validate

    strategy:
      matrix:
        ubuntu-version: ['22.04', '24.04']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Create dummy vault password for CI
        run: |
          echo "ci-dummy-password" > .vault_password

      - name: Test bootstrap role
        run: |
          ansible-playbook playbook.yml \
            --tags bootstrap \
            --check \
            --diff

      - name: Test selected safe roles
        run: |
          # Test roles that don't require GUI or external services
          ansible-playbook playbook.yml \
            --tags "zsh,git,dotfiles" \
            --check \
            --diff
        continue-on-error: true

  shellcheck:
    name: ShellCheck Scripts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run ShellCheck on all bash scripts
        run: |
          find . -name "*.sh" -type f -exec shellcheck {} \;

  check-secrets:
    name: Check for Secrets
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for potential secrets in history backup
        run: |
          if [ -f .dotfiles/zsh/.zsh_history.backup ]; then
            echo "Checking history backup for secrets..."

            # Check for common secret patterns, excluding legitimate commands
            # Exclude lines that are clearly just GPG commands (gpg --list-secret-keys)
            if grep -iE "(api[_-]?key|token|password|aws[_-]?access)" .dotfiles/zsh/.zsh_history.backup | \
               grep -v "gpg --list-secret-keys" | \
               grep -v "gpg --full-generate-key" | \
               grep -v "gpg --armor --export" | \
               grep -q .; then
              echo "⚠️ Warning: Potential secrets found in history backup!"
              exit 1
            fi

            echo "✅ No obvious secrets found in history backup"
          else
            echo "No history backup file found"
          fi

      - name: Check for hardcoded secrets in playbooks
        run: |
          # Check for hardcoded passwords, tokens, etc.
          # Exclude variable names and references like {{ password }}
          if grep -r -iE "(password|token|api_key):\s*['\"]?[a-zA-Z0-9]{8,}" roles/ --include="*.yml" | \
             grep -v "{{" | \
             grep -q .; then
            echo "⚠️ Warning: Potential hardcoded secrets found!"
            exit 1
          fi
          echo "✅ No hardcoded secrets found"

  documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for broken Markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.markdown-link-check.json'
        continue-on-error: true

      - name: Validate README completeness
        run: |
          # Check if README has essential sections
          for section in "Setup" "Update" "Tools"; do
            if ! grep -q "## $section" README.md; then
              echo "Missing section: $section"
              exit 1
            fi
          done
          echo "✅ All essential README sections present"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-validate, test-installation, shellcheck, check-secrets, documentation]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All checks completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Checks Performed:" >> $GITHUB_STEP_SUMMARY
          echo "- Ansible syntax validation" >> $GITHUB_STEP_SUMMARY
          echo "- YAML linting" >> $GITHUB_STEP_SUMMARY
          echo "- Ansible lint" >> $GITHUB_STEP_SUMMARY
          echo "- Shell script validation" >> $GITHUB_STEP_SUMMARY
          echo "- Secret scanning" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation validation" >> $GITHUB_STEP_SUMMARY
