---
# Terraform Installation Tasks - Using HashiCorp's current recommended method

- name: Check if Terraform is installed
  command: command -v terraform
  register: terraform_exists
  failed_when: false
  changed_when: false

# Clean up old installation if force install is enabled
- name: Remove existing Terraform installation for force install
  apt:
    name: terraform
    state: absent
  become: true
  when: (force_install | default(false) | bool) and terraform_exists.rc == 0
  ignore_errors: true

# Clean up old files
- name: Remove HashiCorp old repository files
  file:
    path: "/etc/apt/sources.list.d/{{ item }}"
    state: absent
  with_items:
    - "hashicorp.list"
    - "hashicorp-ubuntu-stable-*.list"
    - "terraform.list"
  become: true
  when: (force_install | default(false) | bool) or terraform_exists.rc != 0

- name: Remove old GPG keys
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/etc/apt/trusted.gpg.d/hashicorp.asc"
    - "/etc/apt/trusted.gpg.d/hashicorp.gpg"
    - "/usr/share/keyrings/hashicorp-archive-keyring.gpg"
  become: true
  when: (force_install | default(false) | bool) or terraform_exists.rc != 0

# Install required packages
- name: Install required packages
  apt:
    name:
      - gnupg
      - software-properties-common
    state: present
    update_cache: true
  become: true
  when: (force_install | default(false) | bool) or terraform_exists.rc != 0

# Install HashiCorp GPG key (exact shell command used manually)
- name: Install HashiCorp GPG key
  shell: wget -O - https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
  args:
    executable: /bin/bash
  become: true
  when: (force_install | default(false) | bool) or terraform_exists.rc != 0

# Step 4: Get system architecture and codename
- name: Get system architecture
  shell: dpkg --print-architecture
  register: system_arch
  changed_when: false

# Get and map Ubuntu codename to supported version for HashiCorp repo
- name: Get and map Ubuntu codename
  shell: |
    codename=$(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs)
    case "$codename" in
      plucky|oracular|mantic|questing|jammy|noble)
        echo focal
        ;;
      *)
        echo "$codename"
        ;;
    esac
  register: hashicorp_repo_codename_raw
  changed_when: false

- name: Set mapped codename fact
  set_fact:
    hashicorp_repo_codename: "{{ hashicorp_repo_codename_raw.stdout | trim }}"
- name: Add HashiCorp apt repository (mapped codename)
  shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ hashicorp_repo_codename }} main" | tee /etc/apt/sources.list.d/hashicorp.list
  args:
    executable: /bin/bash
  become: true
  when: (force_install | default(false) | bool) or terraform_exists.rc != 0

# Step 4: Update apt package lists
- name: Update apt package lists
  apt:
    update_cache: yes
  become: true
  when: (force_install | default(false) | bool) or terraform_exists.rc != 0

# Step 6: Install Terraform
- name: Install Terraform via apt
  apt:
    name: terraform
    state: present
  become: true
  when: (force_install | default(false) | bool) or terraform_exists.rc != 0
  register: terraform_apt_install
  ignore_errors: true

- name: Check Terraform present after apt install
  command: command -v terraform
  register: terraform_post_apt
  failed_when: false
  changed_when: false

# Fallback: if package not available via apt, download official HashiCorp binary
- name: Get latest Terraform version from HashiCorp checkpoint API
  uri:
    url: https://checkpoint-api.hashicorp.com/v1/check/terraform
    return_content: yes
  register: terraform_checkpoint
  when: terraform_post_apt.rc != 0

- name: Set terraform_version fact
  set_fact:
    terraform_version: "{{ terraform_checkpoint.json.current_version }}"
  when: terraform_post_apt.rc != 0

- name: Map system architecture to HashiCorp arch
  set_fact:
    terraform_arch: >-
      {% if system_arch.stdout == 'amd64' %}amd64{% elif system_arch.stdout == 'arm64' %}arm64{% else %}{{ system_arch.stdout }}{% endif %}
  when: terraform_post_apt.rc != 0

- name: Ensure unzip is installed for extracting Terraform
  apt:
    name: unzip
    state: present
    update_cache: yes
  become: true
  when: terraform_post_apt.rc != 0

- name: Download Terraform binary zip
  get_url:
    url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_{{ terraform_arch }}.zip"
    dest: "/tmp/terraform_{{ terraform_version }}_linux_{{ terraform_arch }}.zip"
    mode: '0644'
    force: true
  register: terraform_zip
  become: true
  when: terraform_post_apt.rc != 0

- name: Unpack Terraform binary to /usr/local/bin
  unarchive:
    src: "/tmp/terraform_{{ terraform_version }}_linux_{{ terraform_arch }}.zip"
    dest: /usr/local/bin
    copy: no
  become: true
  when: terraform_post_apt.rc != 0

- name: Ensure Terraform binary is executable
  file:
    path: /usr/local/bin/terraform
    mode: '0755'
    state: file
  become: true
  when: terraform_post_apt.rc != 0

- name: Remove downloaded Terraform zip
  file:
    path: "/tmp/terraform_{{ terraform_version }}_linux_{{ terraform_arch }}.zip"
    state: absent
  become: true
  when: terraform_post_apt.rc != 0

# Verify installation
- name: Verify Terraform installation
  shell: terraform --version
  register: terraform_version
  changed_when: false
  ignore_errors: true

- name: Display Terraform version
  debug:
    var: terraform_version.stdout
  when: terraform_version is defined and terraform_version.rc == 0
