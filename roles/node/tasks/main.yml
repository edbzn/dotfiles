- name: Check if Node.js is installed
  shell: command -v node
  register: node_exists
  failed_when: false
  changed_when: false

- name: Check if npm is installed
  shell: command -v npm
  register: npm_exists
  failed_when: false
  changed_when: false

- name: Remove existing Node.js installation for force install
  apt:
    name: "{{ nodejs_packages }}"
    state: absent
  become: true
  when: force_install | default(false) and (node_exists.rc == 0 or npm_exists.rc == 0)
  ignore_errors: true

- name: Install Node.js
  apt:
    name: "{{ nodejs_packages }}"
    state: "{{ package_state }}"
  become: true
  when: force_install | default(false) or node_exists.rc != 0 or npm_exists.rc != 0

- name: Check if npm global packages are installed
  shell: npm list -g {{ item.name | default(item) }} --depth=0
  register: npm_package_check
  failed_when: false
  changed_when: false
  with_items: "{{ npm_global_packages }}"
  when: not (force_install | default(false))

- name: Install npm global packages (force install or missing packages)
  npm:
    name: "{{ item.item.name | default(item.item) }}"
    version: "{{ item.item.version | default(npm_package_version) }}"
    global: true
    state: "{{ 'latest' if (force_install | default(false)) else 'present' }}"
  become: true
  with_items: "{{ npm_package_check.results | default([]) }}"
  when: >
    (force_install | default(false)) or
    (item.rc is defined and item.rc != 0)
  tags: [npm-global]

- name: Install npm global packages (when force_install is true)
  npm:
    name: "{{ item.name | default(item) }}"
    version: "{{ item.version | default(npm_package_version) }}"
    global: true
    state: latest
  become: true
  with_items: "{{ npm_global_packages }}"
  when: force_install | default(false)
  tags: [npm-global]

- name: Switch to latest Node.js LTS version
  command: "{{ node_lts_command }}"
  become: true
  tags: [switch-to-node-lts]

- name: Enable Corepack
  command: "{{ corepack_command }}"
  become: true

- name: Check Bun installed
  shell: command -v bun
  register: bun_exists
  ignore_errors: true
  tags: [bun]

- name: Remove existing Bun installation for force install
  file:
    path: "{{ ansible_env.HOME }}/.bun"
    state: absent
  when: force_install | default(false) and bun_exists.rc == 0
  tags: [bun]

- name: Download Bun installer
  get_url:
    url: "{{ bun.install_url }}"
    dest: "{{ bun.install_script }}"
    mode: "{{ bun.script_mode }}"
    force: 'yes'
  when: force_install | default(false) or bun_exists.rc != 0
  tags: [bun]

- name: Install Bun
  shell: "{{ bun.install_script }}"
  when: force_install | default(false) or bun_exists.rc != 0
  tags: [bun]

# Verify Bun installation
- name: Verify Bun installation
  shell: bun --version
  register: bun_version
  changed_when: false
  ignore_errors: true
  tags: [bun]

- name: Display Bun version
  debug:
    msg: "Bun {{ bun_version.stdout }} is installed"
  when: bun_version is defined and bun_version.rc == 0
  tags: [bun]

- name: Display Bun installation failure
  debug:
    msg: "Bun installation failed - please check manually"
  when: bun_version is defined and bun_version.rc != 0
  tags: [bun]
