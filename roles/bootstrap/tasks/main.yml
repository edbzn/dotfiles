- name: Install various tools using apt
  apt:
    name: "{{ bootstrap_packages }}"
    update_cache: "{{ update_cache }}"
    state: "{{ package_state }}"
  become: true

- name: Create work directory
  file:
    path: "{{ work_directory.path }}"
    state: directory
    mode: "{{ work_directory.mode }}"

- name: Check if running on Wayland
  shell: echo $XDG_SESSION_TYPE
  register: session_type
  changed_when: false
  failed_when: false

- name: Configure Flameshot for Wayland
  shell: |
    # Disable default GNOME Shell screenshot keybindings to prevent conflicts
    gsettings set org.gnome.shell.keybindings screenshot '[]'
    gsettings set org.gnome.shell.keybindings screenshot-window '[]'
    gsettings set org.gnome.shell.keybindings show-screenshot-ui '[]'

    # Define the base path for the custom keybinding
    KEYBINDING_PATH=/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/

    # Register the path in the custom keybindings list
    gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['${KEYBINDING_PATH}']"

    # Set name, command, and shortcut
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:${KEYBINDING_PATH} name 'Flameshot'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:${KEYBINDING_PATH} command 'script --command "flameshot gui" /dev/null'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:${KEYBINDING_PATH} binding '<Shift><Super>S'
  when: session_type.stdout == "wayland"
  become: false

- name: Get latest Delta release info
  uri:
    url: https://api.github.com/repos/dandavison/delta/releases/latest
    return_content: yes
  register: delta_release
  tags:
    - delta

- name: Set Delta download URL for amd64 Debian package
  set_fact:
    delta_deb_url: "{{ delta_release.json.assets | selectattr('name', 'match', '.*amd64.deb$') | map(attribute='browser_download_url') | first }}"
    delta_version: "{{ delta_release.json.tag_name }}"
  tags:
    - delta

- name: Check if Delta is already installed
  command: delta --version
  register: delta_installed
  failed_when: false
  changed_when: false
  tags:
    - delta

- name: Download and install Delta
  block:
    - name: Create temporary directory for Delta download
      tempfile:
        state: directory
        suffix: delta
      register: delta_temp_dir

    - name: Download Delta Debian package
      get_url:
        url: "{{ delta_deb_url }}"
        dest: "{{ delta_temp_dir.path }}/delta.deb"
        mode: '0644'

    - name: Install Delta Debian package
      apt:
        deb: "{{ delta_temp_dir.path }}/delta.deb"
        state: present
      become: true

    - name: Remove temporary directory
      file:
        path: "{{ delta_temp_dir.path }}"
        state: absent
  when: delta_installed.rc != 0 or (delta_installed.stdout is defined and delta_version not in delta_installed.stdout)
  tags:
    - delta
