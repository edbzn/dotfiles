- name: Check if Docker is installed
  command: command -v docker
  register: docker_exists
  failed_when: false
  changed_when: false

- name: Remove existing Docker installation for force install
  apt:
    name: "{{ docker_packages + docker_required_packages }}"
    state: absent
  become: true
  when: force_install | default(false) | bool and docker_exists.rc == 0
  ignore_errors: true

- name: Remove Docker repository for force install
  apt_repository:
    repo: "{{ docker_repository.repo_url }}"
    state: absent
  become: true
  when: force_install | default(false) | bool
  ignore_errors: true

- name: Remove Docker GPG key for force install
  file:
    path: "{{ docker_repository.gpg_dest }}"
    state: absent
  become: true
  when: force_install | default(false) | bool
  ignore_errors: true

- name: Install Docker required packages
  apt:
    pkg: "{{ docker_required_packages }}"
    state: "{{ package_state }}"
    update_cache: "{{ update_cache }}"
  become: true
  when: force_install | default(false) | bool or docker_exists.rc != 0

- name: Check if Docker GPG key exists
  stat:
    path: "{{ docker_repository.gpg_dest }}"
  register: docker_key_exists

- name: Ensure /etc/apt/keyrings directory exists
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
    owner: root
    group: root
  become: true
  when: force_install | default(false) | bool or not docker_key_exists.stat.exists

- name: Download Docker GPG key to keyrings
  get_url:
    url: "{{ docker_repository.gpg_url }}"
    dest: "{{ docker_repository.gpg_dest }}"
    mode: "{{ docker_repository.gpg_mode }}"
    force: true
  become: true
  when: force_install | default(false) | bool or not docker_key_exists.stat.exists

- name: Re-check Docker GPG key exists
  stat:
    path: "{{ docker_repository.gpg_dest }}"
  register: docker_key_exists
  become: true
  changed_when: false
  failed_when: false

- name: Ensure Docker keyring is world-readable
  file:
    path: "{{ docker_repository.gpg_dest }}"
    mode: "{{ docker_repository.gpg_mode }}"
    owner: root
    group: root
  become: true
  when: docker_key_exists.stat.exists

- name: Check if Docker repository exists
  shell: grep -q "download.docker.com/linux/ubuntu" /etc/apt/sources.list.d/*.list || true
  register: docker_repo_exists
  failed_when: false
  changed_when: false

- name: Determine system architecture for Docker repo
  command: dpkg --print-architecture
  register: dpkg_arch
  changed_when: false
  failed_when: false
  become: true

- name: Write Docker apt source list with signed-by
  copy:
    dest: /etc/apt/sources.list.d/docker.list
    content: |
      deb [arch={{ dpkg_arch.stdout | default('amd64') }} signed-by=/etc/apt/keyrings/docker.asc] {{ docker_repository.repo_url }} {{ ansible_distribution_release }} stable
    owner: root
    group: root
    mode: '0644'
  become: true
  when: force_install | default(false) | bool or docker_repo_exists.rc != 0

- name: Update apt cache after adding Docker repo
  apt:
    update_cache: yes
  become: true
  when: force_install | default(false) | bool or docker_repo_exists.rc != 0

- name: Install Docker packages
  apt:
    name: "{{ docker_packages }}"
    state: "{{ package_state }}"
    update_cache: "{{ update_cache }}"
  become: true
  when: force_install | default(false) | bool or docker_exists.rc != 0
  register: docker_install
  ignore_errors: true

- name: Install Docker without docker-compose-plugin (fallback)
  apt:
    name: docker-ce
    state: "{{ package_state }}"
    update_cache: "{{ update_cache }}"
  become: true
  when:
    - docker_install is failed
    - force_install | default(false) | bool or docker_exists.rc != 0

- name: Check if user is in docker group
  shell: set -o pipefail && groups {{ ansible_user_id }} | grep -q docker
  args:
    executable: /bin/bash
  register: user_in_docker_group
  failed_when: false
  changed_when: false

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user_id }}"
    groups: "{{ docker_group }}"
    append: true
  become: true
  when: force_install | default(false) | bool or user_in_docker_group.rc != 0
