---
- name: Check if vault password file exists
  stat:
    path: "{{ vault_password_file }}"
  register: vault_password_stat
  delegate_to: localhost
  become: false

- name: Ensure secrets directory exists
  file:
    path: "{{ secrets_dir }}"
    state: directory
    mode: '0700'

- name: Check for encrypted SSH private key
  stat:
    path: "{{ encrypted_ssh_key_path }}"
  register: encrypted_ssh_key
  delegate_to: localhost
  become: false

- name: Restore SSH private key from vault
  block:
    - name: Decrypt and copy SSH private key
      copy:
        content: "{{ lookup('file', encrypted_ssh_key_path) }}"
        dest: "{{ ssh_key_path }}"
        mode: '0600'
        decrypt: yes

    - name: Decrypt and copy SSH public key
      copy:
        content: "{{ lookup('file', encrypted_ssh_pub_key_path) }}"
        dest: "{{ ssh_pub_key_path }}"
        mode: '0644'
        decrypt: yes
      when: encrypted_ssh_pub_key_path is defined

    - name: Start SSH agent and add key
      shell: |
        eval "$(ssh-agent -s)"
        ssh-add {{ ssh_key_path }}
      register: ssh_agent_result
      changed_when: false
      failed_when: false

    - name: Display SSH key fingerprint
      command: ssh-keygen -lf {{ ssh_key_path }}
      register: ssh_fingerprint
      changed_when: false

    - name: Show SSH fingerprint
      debug:
        msg: "SSH key restored. Fingerprint: {{ ssh_fingerprint.stdout }}"

  when:
    - vault_password_stat.stat.exists
    - encrypted_ssh_key.stat.exists

- name: Check for encrypted GPG private key
  stat:
    path: "{{ encrypted_gpg_key_path }}"
  register: encrypted_gpg_key
  delegate_to: localhost
  become: false

- name: Restore GPG private key from vault
  block:
    - name: Create temporary directory for GPG import
      tempfile:
        state: directory
        suffix: gpg
      register: gpg_temp_dir

    - name: Decrypt GPG private key to temp file
      copy:
        content: "{{ lookup('file', encrypted_gpg_key_path) }}"
        dest: "{{ gpg_temp_dir.path }}/private-key.asc"
        mode: '0600'
        decrypt: yes

    - name: Import GPG private key
      command: gpg --import {{ gpg_temp_dir.path }}/private-key.asc
      register: gpg_import_result
      changed_when: "'imported: 1' in gpg_import_result.stderr"

    - name: Get imported GPG key ID
      shell: gpg --list-secret-keys --keyid-format=long | grep -A 1 "sec" | tail -n 1 | awk '{print $1}' | head -n 1
      register: imported_gpg_key_id
      changed_when: false

    - name: Set GPG key trust level to ultimate
      shell: |
        echo "$(gpg --list-keys --with-colons | grep "^fpr" | cut -d: -f10 | head -n1):6:" | gpg --import-ownertrust
      when: imported_gpg_key_id.stdout != ""
      changed_when: false
      failed_when: false

    - name: Clean up temporary GPG directory
      file:
        path: "{{ gpg_temp_dir.path }}"
        state: absent

    - name: Display imported GPG key info
      debug:
        msg: "GPG key imported successfully. Key ID: {{ imported_gpg_key_id.stdout }}"
      when: imported_gpg_key_id.stdout != ""

  when:
    - vault_password_stat.stat.exists
    - encrypted_gpg_key.stat.exists

- name: Instructions for first-time setup
  debug:
    msg: |
      ℹ️  No encrypted keys found. To encrypt your keys:

      1. Create vault password file:
         echo "your-secure-password" > {{ vault_password_file }}
         chmod 600 {{ vault_password_file }}

      2. Encrypt your SSH key:
         ansible-vault encrypt ~/.ssh/id_ed25519 --output {{ encrypted_ssh_key_path }}
         ansible-vault encrypt ~/.ssh/id_ed25519.pub --output {{ encrypted_ssh_pub_key_path }}

      3. Encrypt your GPG key:
         gpg --export-secret-keys --armor YOUR_KEY_ID > /tmp/gpg-private.asc
         ansible-vault encrypt /tmp/gpg-private.asc --output {{ encrypted_gpg_key_path }}
         rm /tmp/gpg-private.asc

      4. Commit encrypted keys to your repository:
         git add secrets/
         git commit -m "Add encrypted SSH and GPG keys"
  when: not vault_password_stat.stat.exists or (not encrypted_ssh_key.stat.exists and not encrypted_gpg_key.stat.exists)
